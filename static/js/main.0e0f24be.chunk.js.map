{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","noSort","sortType","setSortType","isReverse","setIsReverse","goods","udatedGoods","leng","alph","sort","good1","good2","length","localeCompare","Error","reverse","updateGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,UAAAA,E,YAAAA,E,aAAAA,M,KAWL,IA6BaE,EAAM,WACjB,MAAgCC,mBAASH,EAASI,QAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAkBC,EAAlB,KAEMC,EAjCY,SAClBA,EADkB,GAEd,IADeJ,EAChB,EADgBA,SAAUE,EAC1B,EAD0BA,UAE7B,GAAiB,KAAbF,IAAoBE,EACtB,OAAOE,EAGT,IAAMC,EAAW,YAAOD,GAmBxB,OAjBIJ,IAAaL,EAASW,MAAQN,IAAaL,EAASY,MACtDF,EAAYG,MAAK,SAACC,EAAOC,GACvB,OAAQV,GACN,KAAKL,EAASW,KACZ,OAAOG,EAAME,OAASD,EAAMC,OAC9B,KAAKhB,EAASY,KACZ,OAAOE,EAAMG,cAAcF,GAC7B,QACE,MAAM,IAAIG,MAAM,0BAKpBX,GACFG,EAAYS,UAGPT,EAOOU,CAAYnB,EAAiB,CAAEI,WAAUE,cAEvD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYvB,EAASY,OAASP,IAEhCmB,QAAS,kBAAMlB,EAAYN,EAASY,OALtC,iCAUA,wBACEU,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYvB,EAASW,OAASN,IAEhCmB,QAAS,kBAAMlB,EAAYN,EAASW,OALtC,4BAUA,wBACEW,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAcD,IAL/B,sBAUEF,GAAYE,IACZ,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAYN,EAASI,QACrBI,GAAa,IALjB,sBAaJ,6BACGC,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCjHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0e0f24be.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  noSort = '',\n  leng = 'leng',\n  alph = 'alph',\n}\n\ninterface StateInterface {\n  sortType: SortType;\n  isReverse: boolean;\n}\n\nconst updateGoods = (\n  goods: string[], { sortType, isReverse }: StateInterface,\n) => {\n  if (sortType === '' && !isReverse) {\n    return goods;\n  }\n\n  const udatedGoods = [...goods];\n\n  if (sortType === SortType.leng || sortType === SortType.alph) {\n    udatedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.leng:\n          return good1.length - good2.length;\n        case SortType.alph:\n          return good1.localeCompare(good2);\n        default:\n          throw new Error('Unbelievable error');\n      }\n    });\n  }\n\n  if (isReverse) {\n    udatedGoods.reverse();\n  }\n\n  return udatedGoods;\n};\n\nexport const App = () => {\n  const [sortType, setSortType] = useState(SortType.noSort);\n  const [isReverse, setIsReverse] = useState(false);\n\n  const goods = updateGoods(goodsFromServer, { sortType, isReverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': SortType.alph !== sortType,\n          })}\n          onClick={() => setSortType(SortType.alph)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': SortType.leng !== sortType,\n          })}\n          onClick={() => setSortType(SortType.leng)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReverse,\n          })}\n          onClick={() => setIsReverse(!isReverse)}\n        >\n          Reverse\n        </button>\n\n        {(sortType || isReverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(SortType.noSort);\n              setIsReverse(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}